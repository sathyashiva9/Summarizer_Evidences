name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.API_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ vars.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Create .env file (Optional for Approach 1)
      run: |
        echo "PORT=${{ vars.PORT }}" >> .env
        echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env
        echo "API_KEY=${{ secrets.API_KEY }}" >> .env

    - name: Build and Push Docker Image
      run: |
        IMAGE="gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ github.repository }}"
        docker build -t $IMAGE .
        docker push $IMAGE

    - name: Install gke-gcloud-auth-plugin
      run: gcloud components install gke-gcloud-auth-plugin --quiet

    - name: Get GKE credentials
      run: gcloud container clusters get-credentials ${{ vars.GKE_CLUSTER_NAME }} --zone ${{ vars.GCP_ZONE }}

    - name: Create ConfigMap
      run: |
        kubectl create configmap node-config \
          --from-literal=PORT=${{ vars.PORT }} \
          --from-literal=NODE_ENV=${{ vars.NODE_ENV }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Secret
      run: |
        kubectl create secret generic node-secret \
          --from-literal=API_KEY=${{ secrets.API_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to GKE
      run: kubectl apply -f kubernetes/deployment.yaml

    - name: Wait for External IP
      run: |
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service node-gke-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$EXTERNAL_IP" ]]; then
            echo "✅ App is live at: http://$EXTERNAL_IP"
            exit 0
          fi
          sleep 10
        done
        echo "❌ External IP not assigned."
        exit 1
